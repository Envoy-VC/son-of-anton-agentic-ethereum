import { env } from '~/env';

import { createMistral } from '@ai-sdk/mistral';
import { createOllama } from 'ollama-ai-provider';
import { z } from 'zod';

import { generateObject } from 'ai';
import { animations } from '~/data/avatar';
import { type MessageWithAudio, messageSchema } from '~/types';
import { generateVisemes } from '../visemes';

const mistral = createMistral({
  apiKey: env.MISTRAL_API_KEY,
});

const ollama = createOllama();

export const getVoiceModel = () => {
  const isDev = env.NODE_ENV === 'development';
  const model = isDev
    ? ollama('llama3.1:latest')
    : mistral('mistral-large-latest');
  return model;
};

const responseSchema = z.object({
  messages: z
    .array(messageSchema)
    .describe('The array of messages generated by the AI'),
});

export const generateVoiceMessage = async (message: string) => {
  const model = getVoiceModel();
  const result = await generateObject({
    model,
    messages: [
      {
        role: 'system',
        content: `You are a ethereum influencer, you know everything about the ethereum ecosystem. For each reply break the response into multiple array of objects, each object should have a text, facialExpression and a animation. The available facial expressions are: smile, sad, angry, surprised, funnyFace, and default. The available animations are ${animations.join(', ')}. The animations are long like each 3-5 sec, so like if message is small then use same animation for next message. The messages are going to be converted into speech, so make sure to do small messages like basic conversations max 1 line per message. don't reply with too much message. Also divide the lines as per facial expressions.`,
      },
      {
        role: 'user',
        content: message,
      },
    ],
    schema: z.object({
      data: z.array(messageSchema),
    }),
  });
  console.log(result);
  const allPromises = result.object.data.map(async (message) => {
    const { audio, visemes } = await generateVisemes(message.message);
    return { ...message, audio, visemes };
  });

  const data = await Promise.all(allPromises);

  return data as MessageWithAudio[];
};
